@page "/authors/delete/{Id:int}"
@using Blazored.Toast.Services

@inject IAuthorRepository Repo
@inject NavigationManager NavManager
@inject IToastService ToastService

<h3>Удалить автора</h3>

@if (!_isSuccessful)
{
    <ErrorMessage Message="Что-то пошло не так!" />
}

@if (Id < 1 || string.IsNullOrWhiteSpace(_model.FirstName))
{
    <ErrorMessage Message="Ошибка! Попробуйте снова" />
}
else if (_model == null)
{
    <LoadingPrompt Message="Загрузка данных..." />
}
else
{
    <div class="col-md-4">
        <table class="table table-responsive">
            <tr>
                <td>Имя</td>
                <td>@_model.FirstName</td>
            </tr>
            <tr>
                <td>Фамилия</td>
                <td>@_model.LastName</td>
            </tr>
            <tr>
                <td>Биография</td>
                <td>@_model.Bio</td>
            </tr>
        </table>
        <br/>
        @if (_model.Books == null || _model.Books.Count < 1)
        {
            <div class="alert alert-dismissible alert-secondary">
                У этого автора пока не добавлено книг
            </div>
        }
        else
        {
            <div class="card" style="width: 18rem;">
                <div class="card-header">
                    <h4>Книги автора</h4>
                </div>
                <ul class="list-group list-group-flush">
                    @foreach (var book in _model.Books)
                    {
                        <li class="list-group-item">@book.Title - @book.Price </li>
                    }
                </ul>
            </div>
        }

    </div>
}
<br/>

<button @onclick="DeleteAuthor" class="btn btn-danger">
    <span class="oi oi-delete"></span>
    Удалить автора
</button>

<button @onclick="BackToList" class="btn btn-outline-secondary">
    <span class="oi oi-media-skip-backward"></span>
    Вернуться к списку
</button>

@code {
    [Parameter]
    public int Id { get; set; }

    private Author _model = new();
    
    private bool _isSuccessful = true;

    protected override async Task OnInitializedAsync()
    {
        _model = await Repo.GetSingle(Endpoints.AuthorsEndpoint, Id);
    }

    private async Task DeleteAuthor()
    {
        _isSuccessful = await Repo.Delete(Endpoints.AuthorsEndpoint, _model.Id);

        if (_isSuccessful)
        {
            ToastService.ShowSuccess("Автор успешно удалён!");
            BackToList();
        }
        else
        {
            ToastService.ShowError("Ошибка при удалении!");
        }
    }

    private void BackToList()
    {
        NavManager.NavigateTo("/authors/");
    }
}
